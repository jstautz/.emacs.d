#+TITLE: Jeff's Emacs config
#+AUTHOR: Jeff Stautz
#+EMAIL: jeff@jeffstautz.com
#+LANGUAGE:  en
#+OPTIONS: toc:nil num:nil ^:nil H:4
#+PROPERTY: header-args :tangle "lisp/emacs-init.el"

#+begin_quote
People talk about getting used to a new editor, but over time, it is precisely the opposite that should happen --- the editor should get used to us.

--- [[http://blog.vivekhaldar.com/post/31970017734/new-frontiers-in-text-editing][Vivek Hadlar]]
#+end_quote

#+TOC: headlines 2

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

** What is this?
:PROPERTIES:
:CUSTOM_ID: what_is_this
:END:

It's a [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]] version of my Emacs config files.

My current setup borrows liberally from Emacs users far smarter than I am, including: 
- [[http://doc.norang.ca/org-mode.html][Bernt Hansen]] 
- [[https://github.com/eschulte/emacs24-starter-kit][Eric Schulte]]
- [[https://github.com/magnars/.emacs.d][Magnar Sveen]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]
- [[https://github.com/technomancy/dotfiles][Phil Hagelberg]]
- [[https://github.com/bodil/emacs.d][Bodil Stokke]]
- [[http://www.masteringemacs.org/][Mickey Petersen]]
- And a ton of others. 

Props and praises are scattered throughout my config in places where I can remember who I stole something from.

** What's literate programming?
:PROPERTIES:
:CUSTOM_ID: what_is_literate
:END: 

Short answer: instead of writing separate documentation, the documentation /contains/ the program. The code itself is secondary to the explanation about how it works.

Or as Knuth puts it:

#+begin_quote 
Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on /explaining to humans/ what we want the computer to do.

--- Donald E. Knuth, Literate Programming, 1984
#+end_quote

The document you're reading now is an [[http://org-mode.org][org-mode]] text file that contains both code *and* documentation. 

On startup, emacs pulls out ("tangles") the code snippets in this file and uses them to configure the editor.

** Why would you use literate programming for your Emacs config?
:PROPERTIES:
:CUSTOM_ID: why_literate
:END:

It's an experiment. We'll see how well it works out.

I've been inspired by [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's literate emacs config]], as well as by [[http://doc.norang.ca/org-mode.html][Bernt Hansen's amazingly thorough and detailed documentation of his org-mode setup]].

Using a literate programming approach has a number of advantages that appeal to me:

1. *Better organization of my .emacs lisp files*
   - My elisp code snippets are embedded within the foldable goodness of org-mode's outline structure.
   - My configuration is better organized and easier to understand.

2. *I'm better able to follow my own thought processes.*
   - Explanations take priority, code is secondary.
   - When I revisit code I wrote ten years ago, I have a hope of understanding /what the hell I was thinking./

3. *Sharing my setup is easier*
   - I have one file that generates nice-looking documentation and the code itself.
   - Detailed explanations of my setup mean it's easier for others to understand it and benefit from it.

** Disclaimers and Warnings
:PROPERTIES:
:CUSTOM_ID: disclaimer
:END:

Fair warning:

- This is a perpetual work in progress.
- No attempts have been made to make this setup portable. It's full of weird environment idiosyncracies, and there are probably a bunch of undocumented dependencies.
- Only tested with Emacs 25.3.1 on OS X
- Your mileage, as they say, may vary.
- I'm not responsible if any of this blows up on you.

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:

#+begin_example
Copyright (C)  2017  Jeff Stautz

Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts.
  
Code in this document is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.
  
This code is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.
#+end_example 
* Structure --- how this works 
:PROPERTIES:
:CUSTOM_ID: structure
:END:

Before we get too deep into my settings, I should explain a little about how all this works.

** init.el
:PROPERTIES:
:CUSTOM_ID: init.el
:END:

The init.el file is [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][the first file that Emacs loads on startup]]. My init.el bootstraps the rest of my config by loading it via org-babel.

My init.el currently looks like this:

#+BEGIN_EXAMPLE emacs-lisp
;; Set up package sources
(require 'package)
(dolist (source '( ("gnu"   . "http://elpa.gnu.org/packages/")
                   ("elpa"  . "http://tromey.com/elpa/")
		   ("org"   . "http://orgmode.org/elpa/")
                   ("melpa" . "http://melpa.milkbox.net/packages/")))
  (add-to-list 'package-archives source t))
(package-initialize)

;; Assume the current directory is our dot-emacs directory
(setq dotemacs-dir (file-name-directory (or load-file-name (buffer-file-name))))

;; If emacs-init.el is *newer* than emacs-init.org, then load the *.el file directly.
;; Otherwise, tangle the *.org file and load.
(if (> (string-to-int (shell-command-to-string "stat -f \"%m\" ~/.emacs.d/lisp/emacs-init.el"))
       (string-to-int (shell-command-to-string "stat -f \"%m\" ~/.emacs.d/emacs-init.org")))
      (load-file (expand-file-name "lisp/emacs-init.elc" dotemacs-dir))
  (org-babel-load-file (expand-file-name "emacs-init.org" dotemacs-dir) t))
#+END_EXAMPLE

That's it.

The important part is that last s-expression: 

#+BEGIN_EXAMPLE emacs-lisp
(org-babel-load-file (expand-file-name "emacs-init.org" dotemacs-dir) t)
#+END_EXAMPLE

This line calls org-babel to extract ("tangle") the code blocks from the =emacs-init.org= file into a file called =emacs-init.el=, then compile it. It then tells Emacs to load all the configurations in that compiled .elc file.

[[http://orgmode.org/worg/org-contrib/babel/][Org-babel is Merlin-level wizardry.]] Eric Schulte, Dan Davison, and everyone who's worked on it all deserve medals. 

Because tangling and loading my .org file takes a few seconds, I've wrapped this call to org-babel in an =if= statement that checks to see if any recent changes have been made to the org file, or if I can load the .elc file directly. 

** emacs-init.org
:PROPERTIES:
:CUSTOM_ID: emacs-init.org
:END:

The =emacs-init.org= file is the meat of my emacs config. It's also the document you're reading right now.

When this document is tangled and loaded by org-babel, =emacs-init.el= is updated with the latest elisp extracted from code blocks in this file.

I try to treat the resulting =emacs-init.el= file like /compiled code/. It's the machine-readable file that I never really look at. Except when debugging.

Any edits or changes, even if they're experimental, are made in the .org file instead of directly in the .el file. This way, I'm ensuring my documentation always stays up to date.


* How I Use Emacs
:PROPERTIES:
:CUSTOM_ID: how-i-use-emacs
:END:

#+begin_quote
This is my rifle. There are many like it, but this one is mine.

--- Major General William H. Rupertus, "The Rifleman's Creed," 1942
#+end_quote

Okay. You've got a pretty good picture of how my config is structured, how it's loaded via org-babel, and how packages are loaded with Cask, Pallet, and use-package. 

Before we get into the actual configuration, it might help to understand some things I do in Emacs.

My use of Emacs is by no means typical, and my configuration reflects this fact.

** Org-mode

[[file:img/org.png]]

I spend 90% of my time in Emacs inside [[http://orgmode.org/][org-mode]]. 

I've been using it for several years for taking notes, planning, writing, and tracking my to-do lists. It's a brilliant piece of software that's totally changed how I organize my digital life. 

I've got a whole separate section of my Emacs config dedicated to the ins and outs of my org-mode configuration. It's gnarly. It's complicated. It involves a lot of yak-shaving. It's ripe for refactoring. But it /works/ for me. 

** Writing

For the last 10 years, I've done most of my fiction writing, journalling, editing, and revising in plain text within Emacs.

Sometimes I work in [[https://daringfireball.net/projects/markdown/][Markdown syntax]] and view the formatted version of my stories in [[http://markedapp.com/][Marked.app]].

Other times I write using minimal [[http://www.latex-project.org/][LaTeX markup]], which I then run through a perl script to add full LaTeX document headers for exporting.

The details of how I use Emacs for fiction writing are documented later in this file. 

** Programming

Unlike many (most?) Emacs users, I'm not a professional software engineer. 

I've done a bunch of development work in the past, and I enjoy messing around in code occasionally. I dabble. I pretend like I know what I'm doing. But I'm nowhere near professional.

[[http://hootsuite.com/careers/][I work with a ton of talented engineers every day at HootSuite]] and they constantly inspire me to learn more, try more, and hack more. 

When I grow up, maybe I'll be an engineer.

There are a couple of languages I work with regularly:

- I use Emacs lisp quite a bit (of course)
- I'm learning Python
- I play around with Javascript

My Emacs settings for software development should be taken with several grains of salt --- these parts of my config aren't very mature and I'm probably doing everything wrong.

** Manipulating files and text of all kinds

Macros, mutli-line editing, directory editing, remote editing over SSH... Emacs is my Swiss Army Knife for text transformations. 

There are large chunks of my config that deal with sharpening various blades of said Swiss Army Knife.


* TODO Environment setup
** Add /lisp to load-path

Let's tell Emacs where to look for things...

#+name: env-dotemacs-load-path
#+BEGIN_SRC emacs-lisp
;; Assume current directory is the dot-emacs directory
(add-to-list 'load-path (concat dotemacs-dir "lisp/"))

#+END_SRC

** Set up variables for other useful directories

Define my home directory, dot emacs directory (where the config lives), emacs binary directory (where Emacs.app lives), and info file directory.

I use these =*-dir= variables all over the place in my config.

Note that these are very specific to my machine and my setup -- it'll probably break on yours.

#+name: env-directories
#+BEGIN_SRC emacs-lisp
;; Set some other useful environment vars, specific to my setup
(setq home-dir "/Users/jeff.stautz/"
      emacs-dir "/Applications/Emacs.app/Contents/"
      emacs-bin (concat emacs-dir "MacOS/Emacs")
      info-dir (concat emacs-dir "Resources/info/"))

#+END_SRC

** Set up $PATH and exec-path

This is a gross hack to grab the $PATH environment variable from my ~/.bashrc and use it. This way my path is consistent between Emacs.app and my shell elsewhere.

#+name: env-path
#+BEGIN_SRC emacs-lisp
;; Make my $PATH environment var the same as in bash
(let ((jcs:shell-path (shell-command-to-string ". ~/.bashrc; echo -n $PATH")))
  (setenv "PATH" jcs:shell-path)
  (setq exec-path (split-string jcs:shell-path ":")))

#+END_SRC

Yeah, you read that elisp right. 

This workaround's required because of the way OS X launches the Emacs app. The only other solution would be to mess around with =launchctl=, and I really don't want to do that right now.
* TODO Install and configure packages

#+name: install-packages
#+BEGIN_SRC emacs-lisp
;; Bootstrap & install packages:
(load-file (concat dotemacs-dir "lisp/packages.el"))

#+END_SRC


* TODO Load custom settings

#+name: custom-settings
#+BEGIN_SRC emacs-lisp
;; Set up interface and editor options the way I like 'em:
(load-file (concat dotemacs-dir "lisp/settings.el"))

#+END_SRC


* TODO Org-mode
:PROPERTIES:
:noweb-ref: Set up org-mode
:END:

** Load org-mode setup (still need to get this into separate org doc)

#+name: hacks-org-setup
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/lisp/init-org-mode.el")

#+END_SRC
