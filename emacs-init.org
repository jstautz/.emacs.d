#+TITLE: Jeff's Emacs config
#+AUTHOR: Jeff Stautz
#+EMAIL: jeff@jeffstautz.com
#+LANGUAGE:  en
#+OPTIONS: toc:nil num:nil ^:nil H:4
#+PROPERTY: header-args :tangle "lisp/emacs-init.el"

#+begin_quote
People talk about getting used to a new editor, but over time, it is precisely the opposite that should happen --- the editor should get used to us.

--- [[http://blog.vivekhaldar.com/post/31970017734/new-frontiers-in-text-editing][Vivek Hadlar]]
#+end_quote

#+TOC: headlines 2

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

** What is this?
:PROPERTIES:
:CUSTOM_ID: what_is_this
:END:

It's a [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]] version of my Emacs config files.

My current setup borrows liberally from Emacs users far smarter than I am, including: 
- [[http://doc.norang.ca/org-mode.html][Bernt Hansen]] 
- [[https://github.com/eschulte/emacs24-starter-kit][Eric Schulte]]
- [[https://github.com/magnars/.emacs.d][Magnar Sveen]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]
- [[https://github.com/technomancy/dotfiles][Phil Hagelberg]]
- [[https://github.com/bodil/emacs.d][Bodil Stokke]]
- [[http://www.masteringemacs.org/][Mickey Petersen]]
- And a ton of others. 

Props and praises are scattered throughout my config in places where I can remember who I stole something from.

** What's literate programming?
:PROPERTIES:
:CUSTOM_ID: what_is_literate
:END: 

Short answer: instead of writing separate documentation, the documentation /contains/ the program. The code itself is secondary to the explanation about how it works.

Or as Knuth puts it:

#+begin_quote 
Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on /explaining to humans/ what we want the computer to do.

--- Donald E. Knuth, Literate Programming, 1984
#+end_quote

The document you're reading now is an [[http://org-mode.org][org-mode]] text file that contains both code *and* documentation. 

On startup, emacs pulls out ("tangles") the code snippets in this file and uses them to configure the editor.

** Why would you use literate programming for your Emacs config?
:PROPERTIES:
:CUSTOM_ID: why_literate
:END:

It's an experiment. We'll see how well it works out.

I've been inspired by [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's literate emacs config]], as well as by [[http://doc.norang.ca/org-mode.html][Bernt Hansen's amazingly thorough and detailed documentation of his org-mode setup]].

Using a literate programming approach has a number of advantages that appeal to me:

1. *Better organization of my .emacs lisp files*
   - My elisp code snippets are embedded within the foldable goodness of org-mode's outline structure.
   - My configuration is better organized and easier to understand.

2. *I'm better able to follow my own thought processes.*
   - Explanations take priority, code is secondary.
   - When I revisit code I wrote ten years ago, I have a hope of understanding /what the hell I was thinking./

3. *Sharing my setup is easier*
   - I have one file that generates nice-looking documentation and the code itself.
   - Detailed explanations of my setup mean it's easier for others to understand it and benefit from it.

** Disclaimers and Warnings
:PROPERTIES:
:CUSTOM_ID: disclaimer
:END:

Fair warning:

- This is a perpetual work in progress.
- No attempts have been made to make this setup portable. It's full of weird environment idiosyncracies, and there are probably a bunch of undocumented dependencies.
- Only tested with Emacs 25.3.1 on OS X
- Your mileage, as they say, may vary.
- I'm not responsible if any of this blows up on you.

** License
:PROPERTIES:
:CUSTOM_ID: license
:END:

#+begin_example
Copyright (C)  2017  Jeff Stautz

Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts.
  
Code in this document is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.
  
This code is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.
#+end_example 

* Environment setup
** Add /lisp to load-path

Let's tell Emacs where to look for things...

#+name: env-dotemacs-load-path
#+BEGIN_SRC emacs-lisp
;; Assume current directory is the dot-emacs directory
(add-to-list 'load-path (concat dotemacs-dir "lisp/"))

#+END_SRC

** Set up variables for other useful directories

Define my home directory, dot emacs directory (where the config lives), emacs binary directory (where Emacs.app lives), and info file directory.

I use these =*-dir= variables all over the place in my config.

Note that these are very specific to my machine and my setup -- it'll probably break on yours.

#+name: env-directories
#+BEGIN_SRC emacs-lisp
;; Set some other useful environment vars, specific to my setup
(setq home-dir "/Users/jeff.stautz/"
      emacs-dir "/Applications/Emacs.app/Contents/"
      emacs-bin (concat emacs-dir "MacOS/Emacs")
      info-dir (concat emacs-dir "Resources/info/"))

#+END_SRC

** Set up $PATH and exec-path

This is a gross hack to grab the $PATH environment variable from my ~/.bashrc and use it. This way my path is consistent between Emacs.app and my shell elsewhere.

#+name: env-path
#+BEGIN_SRC emacs-lisp
;; Make my $PATH environment var the same as in bash
(let ((jcs:shell-path (shell-command-to-string ". ~/.bashrc; echo -n $PATH")))
  (setenv "PATH" jcs:shell-path)
  (setq exec-path (split-string jcs:shell-path ":")))

#+END_SRC

Yeah, you read that elisp right. 

This workaround's required because of the way OS X launches the Emacs app. The only other solution would be to mess around with =launchctl=, and I really don't want to do that right now.
* Install and configure packages

#+name: install-packages
#+BEGIN_SRC emacs-lisp
;; Bootstrap & install packages:
(load-file (concat dotemacs-dir "lisp/packages.el"))

#+END_SRC


* Load custom settings

#+name: custom-settings
#+BEGIN_SRC emacs-lisp
;; Set up interface and editor options the way I like 'em:
(load-file (concat dotemacs-dir "lisp/settings.el"))

#+END_SRC


* Org-mode
:PROPERTIES:
:noweb-ref: Set up org-mode
:END:

** Load org-mode setup (still need to get this into separate org doc)

#+name: hacks-org-setup
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/lisp/init-org-mode.el")

#+END_SRC
